import java.util.Scanner;
import java.util.HashMap;

public class ShortestPath{
    public EdgeWeightedDigraph graph;
    public Hashmap <Integer, Integer> map = new HashMap <Integer, Integer>();
    int index;

    ShortestPath(String filename){

    }

    public EdgeWeightedDigraph Vertices(String filename){
        int numberOfStops = -1;
        File file = new File(filename);
        try{
            Scanner scanner = new Scanner(file);
            while(scanner.hasNextLine()){
                numberOfStops++;
                scanner.nextLine();
            }
            graph = new EdgeWeightedDigraph(numberOfStops);
        }
        catch(FileNotFoundException E){
            e.printStackTrace();
        }

    }

    public EdgeWeightedDigraph StopTimes(String filename){
        String categories;
        String current;
        String next;
        int weight;
        File file = new File("stop_times.txt");
        try{
        Scanner scanner = new Scanner(file);
        categories = scanner.nextLine();
        current = scanner.nextLine();
        while(scanner.hasNextLine()){
            next = scanner.nextLine();
            String [] lineInformation1 = current.split(",");
            String [] lineInformation2 = next.split(",");
            if(lineInformation[0] == lineInformation2[0]){
                String currentStopNumber = lineInformation1[3];
                String nextStopNumber = lineInformation2[3];
                int CurrentStopNumberInt = Integer.parseInt(currentStopNumber);
                int NextStopNumberInt = Integer.parseInt(nextStopNumber);
                if(map.get(currentStopNumber) == null){
                    map.put(currentStopNumber, index);
                    index++;
                }
                if(map.get(nextStopNumber) == null){
                    map.put(nextStopNumber, index);
                    index++;
                }
                weight = 1;
                DirectedEdge edge = new DirectedEdge(map.get(currentStopNumber), map.get(nextStopNumber), weight);
                graph.addEdge(edge);
            }
            current = next;
        }
        scanner.close();
            }
        catch(FileNotFoundException e){
            e.printStackTrace();
        }
        return graph;
    }
}


